"""
Module principal de l'application SQL Trainer.

Ce fichier initialise la base de donn√©es,
charge les exercices et les solutions SQL, et fournit une interface
interactive avec Streamlit pour que les utilisateurs puissent pratiquer SQL.
"""

import os

import duckdb
import streamlit as st

from init_db import initialize_database_tables


def connect_db(name: str) -> duckdb.DuckDBPyConnection:
    """Connecte √† la base de donn√©es DuckDB.

    :param name: Nom du fichier de base de donn√©es.
    :returns: Objet de connexion √† la base de donn√©es.
    """
    return duckdb.connect(database=f"./data/{name}", read_only=False)


def init_database(name: str) -> None:
    """Initialise la base de donn√©es en cr√©ant le dossier de donn√©es et les tables n√©cessaires.

    :param name: Nom du fichier de base de donn√©es.
    """
    # Cr√©e le dossier s'il n'existe pas
    if "data" not in os.listdir():
        os.mkdir("data")

    # Initialise la base de donn√©es si le fichier n'existe pas
    if name not in os.listdir("data"):
        con = connect_db(name)
        initialize_database_tables(con)  # Initialisation des tables
        con.close()


def init_session_state() -> None:
    """Initialise les variables de l'√©tat de session Streamlit pour l'option,
    l'exercice et la requ√™te de l'utilisateur."""

    if "option" not in st.session_state:
        st.session_state.option = ""
    if "exercise" not in st.session_state:
        st.session_state.exercise = ""
    if "user_query" not in st.session_state:
        st.session_state.user_query = ""


def show_welcome_screen(available_themes: list[str]) -> None:
    """Affiche un √©cran de bienvenue et une s√©lection de th√®me."""

    st.title("Bienvenue sur **SQL Trainer** üêò")
    st.subheader(
        "Une plateforme interactive pour ma√Ætriser SQL √† travers des exercices pratiques."
    )
    st.selectbox(
        "Choisissez un th√®me pour commencer :",
        available_themes,
        index=None,  # Aucun th√®me s√©lectionn√© par d√©faut
        key="initial_theme_selection",
        placeholder="Choisissez un th√®me...",
        on_change=lambda: st.session_state.update(
            {"option": st.session_state.initial_theme_selection}
        ),
    )


def get_available_themes(con: duckdb.DuckDBPyConnection) -> list[str]:
    """R√©cup√®re la liste des th√®mes disponibles dans la base de donn√©es.

    :param con: Connexion active √† la base de donn√©es.
    :returns: Liste des th√®mes disponibles, ordonn√©e alphab√©tiquement.
    """
    available_themes = con.execute(
        "SELECT DISTINCT theme FROM exercises ORDER BY theme"
    ).fetchall()
    return [theme[0] for theme in available_themes]


def get_exercises_for_theme(con: duckdb.DuckDBPyConnection, theme: str) -> list[str]:
    """R√©cup√®re les exercices disponibles pour un th√®me sp√©cifique.

    :param con: Connexion active √† la base de donn√©es.
    :param theme: Nom du th√®me pour lequel r√©cup√©rer les exercices.
    :returns: Liste des noms d'exercices pour le th√®me donn√©.
    """
    exercise_list = con.execute(
        "SELECT exercise_name FROM exercises WHERE theme = ? ORDER BY exercise_name",
        (theme,),
    ).fetchall()
    return [exercise[0] for exercise in exercise_list]


def handle_sidebar(con: duckdb.DuckDBPyConnection, available_themes: list[str]) -> str:
    """G√®re la s√©lection du th√®me et de l'exercice dans la barre lat√©rale.

    :param con: Connexion active √† la base de donn√©es.
    :param available_themes: Liste des th√®mes disponibles.
    :returns: L'exercice s√©lectionn√©.
    """
    with st.sidebar:
        st.selectbox(
            "Changer de th√®me :",
            available_themes,
            index=(
                available_themes.index(st.session_state.option)
                if st.session_state.option in available_themes
                else 0
            ),
            key="sidebar_selected_theme",
            on_change=lambda: st.session_state.update(
                {"option": st.session_state.sidebar_selected_theme}
            ),
        )

        exercises = get_exercises_for_theme(con, st.session_state.option)
        current_exercise = st.selectbox(
            "Choisissez un exercice :",
            exercises,
            key="sidebar_selected_exercise",
            placeholder="Choisissez un exercice...",
        )

        st.session_state.exercise = current_exercise
    return current_exercise


def main() -> None:
    """Fonction principale de l'application Streamlit pour initier
    la base de donn√©es et afficher les exercices SQL."""
    init_database("db.duckdb")  # Initialiser la base de donn√©es
    con = connect_db("db.duckdb")  # Connexion √† la base de donn√©es
    init_session_state()
    available_themes = get_available_themes(con)  # R√©cup√©rer les th√®mes disponibles

    # Affichage conditionnel
    if not st.session_state.option:
        show_welcome_screen(
            available_themes
        )  # Afficher la page d'accueil si aucun th√®me n'est s√©lectionn√©
    else:
        handle_sidebar(
            con, available_themes
        )  # Afficher la barre lat√©rale apr√®s s√©lection d'un th√®me


if __name__ == "__main__":
    main()
